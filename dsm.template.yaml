AWSTemplateFormatVersion: 2010-09-09
Description: >
  Dev env for policy migration
Parameters:
  KeyName:
    Description: KeyPair for EC2 Instances.
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Select an existing EC2 Key Pair.
    Default: lab-key-pair
  DSActivationCode:
    Description: AC for DSM, only needed for fastdsm condition
    Type: String
    Default: ""
    Type: String
  DevIP:
    Description: The public ip of your dev machine
    Type: String
    Default: ""
  SecretPassword:
    Description: Password for your DSM
    Type: String
    NoEcho: true

Mappings:
  AMZN:
    us-east-1:
      AMZN: ami-0323c3dd2da7fb37d
    us-west-2:
      AMZN: ami-0d6621c01e8c2de2c
    us-east-2:
      AMZN: ami-0f7919c33c90f5b58
  DSMRHEL:
    us-east-1:
      DSMRHEL: ami-08e923f2f38197e46
    us-west-2:
      DSMRHEL: ami-0be2c515a090d16b0
    us-east-2:
      DSMRHEL: ami-0aaba9ba5c26d33c7

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-VPC"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-IGW"

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Subnet"

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Rtb"

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet

  DSMSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: DSM Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Sub "${DevIP}/32"
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: !Sub "${DevIP}/32"
      - IpProtocol: tcp
        FromPort: 4120
        ToPort: 4120
        CidrIp: !Sub "${DevIP}/32"
      - IpProtocol: tcp
        FromPort: 4122
        ToPort: 4122
        CidrIp: !Sub "${DevIP}/32"
      SecurityGroupEgress:
      - Description: Allow all outbound traffic
        IpProtocol: '-1'
        CidrIp: 0.0.0.0/0

  DSMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AWSMarketplaceMeteringFullAccess
      - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      - arn:aws:iam::aws:policy/service-role/AWSIoTDeviceDefenderPublishFindingsToSNSMitigationAction
      Path: /
      Policies:
      - PolicyName: DeepSecurityManagerInstancePolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - ec2:DescribeImages
            - ec2:DescribeInstances
            - ec2:DescribeRegions
            - ec2:DescribeSubnets
            - ec2:DescribeTags
            - ec2:DescribeVpcs
            - ec2:DescribeAvailabilityZones
            - ec2:DescribeSecurityGroups
            - workspaces:DescribeWorkspaces
            - workspaces:DescribeWorkspaceDirectories
            - workspaces:DescribeWorkspaceBundles
            - workspaces:DescribeTags
            - iam:ListAccountAliases
            - iam:GetRole
            - iam:GetRolePolicy
            - ec2:DescribeLicenses
            - sts:AssumeRole
            Resource: '*'
  DSMProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref DSMRole

  DSM:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref DSMProfile
      ImageId: !FindInMap
      - DSMRHEL
      - !Ref AWS::Region
      - DSMRHEL
      InstanceType: m4.2xlarge
      KeyName: !Ref KeyName
      BlockDeviceMappings:
      - DeviceName: /dev/sda1
        Ebs:
          VolumeSize: 25
      - DeviceName: /dev/xvda
        Ebs:
          VolumeSize: 100
      NetworkInterfaces:
      - AssociatePublicIpAddress: true
        DeviceIndex: '0'
        GroupSet:
        - Ref: DSMSecurityGroup
        SubnetId:
          Ref: Subnet
      Tags:
      - Key: Name
        Value: DSM
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -x
          download(){
          until curl -f $@ ;
          do
          sleep 1
          done
          }
          sudo yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
          sudo systemctl enable amazon-ssm-agent
          sudo systemctl start amazon-ssm-agent
          dsmMajorVersion="20.0"
          dsmMinorVersion="463"
          dsmVersion="$dsmMajorVersion.$dsmMinorVersion"
          downloadUrl="https://files.trendmicro.com"

          download(){
            until curl -f $@ ;
            do
              sleep 1
            done
          }
          if ! [ $(id -u) = 0 ]; then
             echo "This script must be run as root"
             exit 1
          fi

          # setup dir
          mkdir -p /opt/fastdsm/
          cd /opt/fastdsm/

          echo "$(date) -- Installing Docker Dependencies"

          #Docker dependencies
          yum install -y yum-utils \
            device-mapper-persistent-data \
            lvm2

          #Detect OS version for Extra repo enablement
          echo "$(date) -- Detecting OS and installing Docker"

          OS=`cat /etc/system-release`
          echo $OS
          if [[ $OS == *"7.6"* || $OS == *"7.7"* || $OS == *"7.8"* ]] ; then
              echo "setting up repos and installing docker on RHEL"
              yum-config-manager --enable rhui-REGION-rhel-server-extras
              yum-config-manager --enable rhel-7-server-rhui-extras-rpms
              yum-config-manager --enable rhui-rhel-7-server-rhui-extras-rpms
              yum install -y container-selinux
              yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
              sed -i 's/$releasever/7/g' /etc/yum.repos.d/docker-ce.repo
              yum -y install docker-ce
          elif [[ $OS == *"Amazon"* ]] ; then
              echo "Installing docker for Amazon Linux, repos already available"
              yum -y install docker
          else echo "Platform not supported for install"
          fi

          #Download proper installer per OS
          echo "$(date) -- Downloading DSM installer"

          if [[ $OS == *"7.6"* || $OS == *"7.7"* || $OS == *"7.8"* ]] ; then
              managerInstaller="$downloadUrl/products/deepsecurity/en/$dsmMajorVersion/Manager-Linux-$dsmVersion.x64.sh"
              download $managerInstaller -o Manager-Linux.sh
          elif [[ $OS == *"Amazon"* ]] ; then
              DSActivationCode=""
              managerInstaller="$downloadUrl/products/deepsecurity/en/$dsmMajorVersion/Manager-AWS_Marketplace_Upgrade-$dsmVersion.x64.zip"
              download $managerInstaller -o Manager-Amazon-Linux.zip
              mkdir /opt/fastdsm/amazonlinux
              unzip ./Manager-Amazon-Linux.zip -d /opt/fastdsm/amazonlinux
              mv /opt/fastdsm/amazonlinux/Manager-AWS-$dsmVersion.x64.sh /opt/fastdsm/Manager-Linux.sh
              rm -rf /opt/fastdsm/amazonlinux
          else echo "Platform not supported"
          fi

          service docker start

          echo "$(date) -- creating pgsql container for dsmdb"
          docker pull postgres:9
          docker run --name dsmpgsqldb -p 5432:5432 -e "POSTGRES_PASSWORD=${SecretPassword}"  -e POSTGRES_DB=dsm -d postgres:9
          echo "$(date) -- creating database in sql instance"

          # persist db across restart
          echo "$(date) -- creating service config to persiste db instance"
          download https://s3.amazonaws.com/424d57/fastDsm/docker-dsmdb -o /etc/init.d/docker-dsmdb
          chmod 755 /etc/init.d/docker-dsmdb
          chkconfig --add docker-dsmdb
          chkconfig docker-dsmdb on
          chkconfig --add docker
          chkconfig docker on


          # get ds files
          echo "$(date) -- downloading agent installers"
          download -O "https://files.trendmicro.com/products/deepsecurity/en/20.0/Agent-amzn1-20.0.0-1822.x86_64.zip"
          download -O "http://files.trendmicro.com/products/deepsecurity/en/20.0/KernelSupport-amzn1-20.0.0-1853.x86_64.zip"
          download -O "https://files.trendmicro.com/products/deepsecurity/en/20.0/Agent-amzn2-20.0.0-1822.x86_64.zip"
          download -O "http://files.trendmicro.com/products/deepsecurity/en/20.0/KernelSupport-amzn2-20.0.0-1867.x86_64.zip"
          download -O "https://files.trendmicro.com/products/deepsecurity/en/20.0/Agent-RedHat_EL8-20.0.0-1822.x86_64.zip"
          download -O "http://files.trendmicro.com/products/deepsecurity/en/20.0/KernelSupport-RedHat_EL8-20.0.0-1849.x86_64.zip"
          download -O "https://files.trendmicro.com/products/deepsecurity/en/20.0/Agent-RedHat_EL7-20.0.0-1822.x86_64.zip"
          download -O "http://files.trendmicro.com/products/deepsecurity/en/20.0/KernelSupport-RedHat_EL7-20.0.0-1834.x86_64.zip"
          download -O "https://files.trendmicro.com/products/deepsecurity/en/20.0/Agent-RedHat_EL6-20.0.0-1822.x86_64.zip"
          download -O "http://files.trendmicro.com/products/deepsecurity/en/20.0/KernelSupport-RedHat_EL6-20.0.0-1855.x86_64.zip"
          download -O "https://files.trendmicro.com/products/deepsecurity/en/20.0/Agent-Windows-20.0.0-1822.x86_64.zip"
          download -O "https://files.trendmicro.com/products/deepsecurity/en/20.0/Agent-Ubuntu_18.04-20.0.0-1822.x86_64.zip"
          download -O "http://files.trendmicro.com/products/deepsecurity/en/20.0/KernelSupport-Ubuntu_18.04-20.0.0-1868.x86_64.zip"

          # make a properties file
          echo "$(date) -- creating dsm properties file"
          echo "AddressAndPortsScreen.ManagerPort=443" >> dsm.props
          echo "AddressAndPortsScreen.HeartbeatPort=4120" >> dsm.props
          echo "AddressAndPortsScreen.ManagerAddress=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)" >> dsm.props
          echo "CredentialsScreen.Administrator.Username=SuperUser" >> dsm.props
          echo "CredentialsScreen.UseStrongPasswords=False" >> dsm.props
          echo "CredentialsScreen.Administrator.Password=${SecretPassword}" >> dsm.props
          echo "SecurityUpdatesScreen.UpdateComponents=True" >> dsm.props
          echo "DatabaseScreen.DatabaseType=PostgreSQL" >> dsm.props
          echo "DatabaseScreen.Hostname=localhost:5432" >> dsm.props
          echo "DatabaseScreen.Username=postgres" >> dsm.props
          echo "DatabaseScreen.Password=${SecretPassword}" >> dsm.props
          echo "DatabaseScreen.DatabaseName=dsm" >> dsm.props
          echo "SecurityUpdateScreen.UpdateComponents=true" >> dsm.props
          echo "SecurityUpdateScreen.UpdateSoftware=true" >> dsm.props
          echo "SmartProtectionNetworkScreen.EnableFeedback=false" >> dsm.props
          echo "SmartProtectionNetworkScreen.IndustryType=blank" >> dsm.props
          echo "RelayScreen.Install=True" >> dsm.props
          echo "RelayScreen.AntiMalware=True" >> dsm.props
          echo "Override.Automation=True" >> dsm.props
          echo "LicenseScreen.License.-1=${DSActivationCode}" >> dsm.props

          # install manager
          echo "$(date) -- installing manager"
          chmod 755 Manager-Linux.sh
          ./Manager-Linux.sh -q -console -varfile dsm.props
          if [ $? -ne 0 ]; then
            echo "$(date) -- manager install FAILED"
            cat /opt/fastdsm/DeepSecurityInstallerReport.csv
            exit -1
          fi
          echo "$(date) -- manager install complete"
          chkconfig dsm_s on

          # customize dsm
          yum -y install perl-XML-Twig
          echo "$(date) -- starting manager customization"
          curl -O https://s3.amazonaws.com/trend-micro-quick-start/v5.1/Common/Scripts/set-aia-settings.sh
          chmod 755 set-aia-settings.sh
          curl -O https://s3.amazonaws.com/trend-micro-quick-start/v3.7/Common/Scripts/set-lbSettings
          chmod 755 set-lbSettings
          curl -O https://raw.githubusercontent.com/deep-security/ops-tools/master/deepsecurity/manager-apis/bash/ds10-rest-cloudAccountCreateWithInstanceRole.sh
          chmod 755 ds10-rest-cloudAccountCreateWithInstanceRole.sh
          curl https://s3.amazonaws.com/trend-micro-quick-start/v5.2/Common/Scripts/dsm_s.service -o /etc/systemd/system/dsm_s.service
          chmod 755 /etc/systemd/system/dsm_s.service


          echo "$(date) -- waiting for manager startup to complete"
          until curl -vk https://127.0.0.1:443/rest/status/manager/current/ping; do echo \"manager not started yet\" >> /tmp/4-check-service; service dsm_s start >> /tmp/4-check-service; sleep 30; done
          echo "$(date) -- manager startup complete. continuing with API call customizations"
          ./set-aia-settings.sh SuperUser ${SecretPassword} localhost 443
          name=$(curl http://169.254.169.254/latest/meta-data/public-hostname)
          if [ -z $name ]; then name=$(curl http://169.254.169.254/latest/meta-data/public-ipv4); fi
          ./set-lbSettings SuperUser ${SecretPassword} $name 443 4120
          ./ds10-rest-cloudAccountCreateWithInstanceRole.sh SuperUser ${SecretPassword} localhost 443

          echo "$(date) -- completed manager customizations"
  # AWSUser:
  #   Type: AWS::IAM::User
  #   Properties:
  #     Path: /
  #     Groups:
  #     - !Ref AWSUserGroup
  #     LoginProfile:
  #       Password: !Ref PlayerPassword

  # AWSUserGroup:
  #   Type: AWS::IAM::Group
  #   Properties:
  #     Path: /
  #     Policies:
  #     - PolicyName: DeepSecurityIAMPolicy
  #       PolicyDocument:
  #         Statement:
  #         - Effect: Allow
  #           Action:
  #           - ec2:DescribeLicenses
  #           - ec2:DescribeImages
  #           - ec2:DescribeInstances
  #           - ec2:DescribeRegions
  #           - ec2:DescribeSubnets
  #           - ec2:DescribeTags
  #           - ec2:DescribeVpcs
  #           - iam:ListAccountAliases
  #           - ec2:DescribeAvailabilityZones
  #           - ec2:DescribeSecurityGroups
  #           - iam:ListAccountAliases
  #           - iam:GetRole
  #           - iam:GetRolePolicy
  #           Resource: '*'

  # AWSAccessKey:
  #   Type: AWS::IAM::AccessKey
  #   DependsOn: AWSUser
  #   Properties:
  #     UserName: !Ref AWSUser
Outputs:
  DSMURL:
    Value: !Sub "https://${DSM.PublicDnsName}"
  DSMFQDN:
    Value: !GetAtt DSM.PublicDnsName
  DSMSecurityGroup:
    Value: !GetAtt DSMSecurityGroup.GroupId

